{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GuessAmount","guesses","map","guess_letter","Hangman","props","src","hang","alt","Answer","this","word","correctlyGuessedLetters","lines","haveWeEverHitElseClause","i","length","indexOf","push","alert","window","location","reload","className","React","Component","IncorrectLetters","wrongLetters","hidden","AnswerInput","state","inputValue","hasGameStarted","InputGroup","size","Prepend","Button","onClick","onInputSubmitted","FormControl","aria-label","aria-describedby","type","maxLength","value","onChange","e","setState","target","HiddenInput","replace","App","letter","isThisCorrectLetter","updatedCorrectlyGuessedLetters","slice","updatedIncorrectlyGuessedLetters","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad65c204.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\n\nfunction GuessAmount({ guesses = [] }) {\n  return (\n    <ul>\n      {guesses.map(({ guess_letter }) => (\n        <li>{guess_letter}</li>\n      ))}\n    </ul>\n  );\n}\n\nfunction Hangman(props) {\n  return <img src={'./images/hang' + props.hang + '.png'} alt=\"\" />;\n}\n\nclass Answer extends React.Component {\n  render() {\n    const { word, correctlyGuessedLetters } = this.props;\n    let lines = [];\n    let haveWeEverHitElseClause = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (correctlyGuessedLetters.indexOf(word[i]) !== -1) {\n        lines.push(<li>{word[i]}</li>);\n        ++haveWeEverHitElseClause;\n      } else {\n        lines.push(<li>_</li>);\n      }\n    }\n    if (word.length > 0 && haveWeEverHitElseClause >= word.length) {\n      alert('congrats');\n      window.location.reload(false);\n    }\n\n    return <ul className=\"guessesContainer\">{lines}</ul>;\n  }\n}\n\nclass IncorrectLetters extends React.Component {\n  render() {\n    let wrongLetters = this.props.wrongLetters;\n\n    if (wrongLetters.length > 7) {\n      alert('You Lose');\n      window.location.reload(false);\n    }\n\n    return (\n      <div hidden={this.props.wrongLetters.length === 0}>\n        <span>Wrong Letters:</span>\n        {wrongLetters}\n      </div>\n    );\n  }\n}\n\nclass AnswerInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: '',\n    };\n  }\n  render() {\n    return (\n      <div hidden={!this.props.hasGameStarted}>\n        <InputGroup size=\"lg\">\n          <InputGroup.Prepend>\n            <Button\n              onClick={() => {\n                this.props.onInputSubmitted(this.state.inputValue);\n              }}\n            >\n              Guess\n            </Button>\n          </InputGroup.Prepend>\n          <FormControl\n            aria-label=\"Guess\"\n            aria-describedby=\"inputGroup-sizing-sm\"\n            type=\"text\"\n            maxLength=\"1\"\n            value={this.state.inputValue}\n            onChange={(e) => {\n              this.setState({ inputValue: e.target.value });\n            }}\n          />\n        </InputGroup>\n      </div>\n    );\n  }\n}\n\nclass HiddenInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: '',\n    };\n  }\n\n  render() {\n    return (\n      <div hidden={this.props.hasGameStarted}>\n        <InputGroup size=\"lg\">\n          <InputGroup.Prepend>\n            <Button\n              onClick={() => {\n                if (this.state.inputValue.length >= 0) {\n                  this.props.onInputSubmitted(this.state.inputValue);\n                }\n              }}\n            >\n              Start Game\n            </Button>\n          </InputGroup.Prepend>\n          <FormControl\n            aria-label=\"Guess\"\n            aria-describedby=\"inputGroup-sizing-sm\"\n            type=\"password\"\n            value={this.state.inputValue}\n            onChange={(e) => {\n              this.setState({ inputValue: e.target.value.replace(' ', '') });\n            }}\n          />\n        </InputGroup>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      word: '',\n      letter: '',\n      correctlyGuessedLetters: [],\n      wrongLetters: [],\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <GuessAmount />\n        <Hangman hang={this.state.wrongLetters.length} />\n        <IncorrectLetters\n          correctlyGuessedLetters={this.state.correctlyGuessedLetters}\n          word={this.state.word}\n          hasGameStarted={this.state.word.length !== 0}\n          wrongLetters={this.state.wrongLetters}\n        />\n        <Answer\n          word={this.state.word}\n          letter={this.state.letter}\n          correctlyGuessedLetters={this.state.correctlyGuessedLetters}\n        />\n        <AnswerInput\n          hasGameStarted={this.state.word.length !== 0}\n          onInputSubmitted={(letter) => {\n            const isThisCorrectLetter = this.state.word.indexOf(letter) !== -1;\n            let updatedCorrectlyGuessedLetters = this.state.correctlyGuessedLetters.slice();\n            let updatedIncorrectlyGuessedLetters = this.state.wrongLetters.slice();\n\n            if (isThisCorrectLetter) {\n              updatedCorrectlyGuessedLetters.push(letter);\n            } else {\n              updatedIncorrectlyGuessedLetters.push(letter);\n            }\n            this.setState({\n              letter,\n              correctlyGuessedLetters: updatedCorrectlyGuessedLetters,\n              wrongLetters: updatedIncorrectlyGuessedLetters,\n            });\n          }}\n        />\n        <HiddenInput\n          hasGameStarted={this.state.word.length !== 0}\n          onInputSubmitted={(word) => {\n            this.setState({ word });\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <div className=\"container\">\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}